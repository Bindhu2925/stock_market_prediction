# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tR0mJEMieEqv8T4FL2pRmmckjV0rmGW8
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from langchain.chat_models import ChatOpenAI
from langchain.agents import initialize_agent, AgentType
from langchain.tools import DuckDuckGoSearchResults

# Initialize OpenAI model
openai_api_key = "sk-y1Cl0XQAdlFtB_SCH2m2KGtPnIU8QT5oyXjavvYq78T3BlbkFJ-tLSXRmGlF3G_k1Q8LNg1Hp8Jct1TfssXqJFttXioA"  # Replace with your OpenAI API key
llm = ChatOpenAI(openai_api_key=openai_api_key, model="gpt-3.5-turbo")
tools = [DuckDuckGoSearchResults()]
agent = initialize_agent(tools=tools, llm=llm, agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)

# Function to fetch stock prices
def get_stock_price(ticker, history=5):
    if "." in ticker:
        ticker = ticker.split(".")[0]
    ticker = ticker + ".NS"
    stock = yf.Ticker(ticker)
    df = stock.history(period="1y")
    df = df[["Close", "Volume"]]
    df.index = [str(x).split()[0] for x in list(df.index)]
    df.index.rename("Date", inplace=True)
    df = df[-history:]
    return df

# Title of the app
st.title("Data Input, Stock Analysis, and AI Interaction App")

# Section 1: File Upload
st.header("Upload Your Data File")
uploaded_file = st.file_uploader("Choose a file", type=["csv", "xlsx"])

if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith(".csv"):
            data = pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith(".xlsx"):
            data = pd.read_excel(uploaded_file)

        st.write("### Uploaded Data Preview:")
        st.write(data.head())
    except Exception as e:
        st.error(f"Error reading the file: {e}")

# Section 2: Stock Price Retrieval
st.header("Stock Price Analysis")
ticker = st.text_input("Enter Stock Ticker (e.g., TCS, INFY)")
history = st.slider("Number of Recent Days to Fetch", 1, 30, 5)
if st.button("Fetch Stock Data"):
    try:
        stock_data = get_stock_price(ticker, history)
        st.write("### Stock Data:")
        st.write(stock_data)
        st.line_chart(stock_data["Close"])
    except Exception as e:
        st.error(f"Error fetching stock data: {e}")

# Section 3: AI Interaction
st.header("Ask the AI")
query = st.text_area("Enter your query")
if st.button("Get AI Response"):
    try:
        response = agent.run(query)
        st.write("### AI Response:")
        st.write(response)
    except Exception as e:
        st.error(f"Error generating response: {e}")

# Section 4: Visualization (Optional for uploaded data)
if uploaded_file is not None:
    st.header("Visualization")
    if st.button("Generate Plot"):
        st.write("### Example Plot")
        fig, ax = plt.subplots()
        data.hist(ax=ax, figsize=(10, 5))  # Example: Histogram of the data
        st.pyplot(fig)